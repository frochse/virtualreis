# -*- mode: ruby -*-
# vi: set ft=ruby :
# vagrant [--boxes-config=<file>] [--skip-tests] up/reload [box] --provision
# vagrant [--boxes-config=<file>] [--skip-tests] [--tests-only] provision [box]
# vagrant [--boxes-config=<file>] [--skip-tests] status/halt/destroy [box]
#
# Run a single named test:
# vagrant --boxes-config=./config/boxes/lab006.yaml  --run-test=docker --tests-only provision docker

VAGRANTFILE_API_VERSION = "2"
require 'yaml'

### VARIABLE DEFAULTS INITS
  ##  GLOBALS
    __script_path="/vagrant/scripts"
    boxes_config=""
    package_dir="~/vs_lab/boxes"
    run_test=""
    package_script="./scripts/package.sh"
    stack=""
  ##/
  ## LOCALS (BOX SCOPE)
    a_box = ""
    do_provision = false
    do_provision_while_up = false
    do_package =false
    run_tests = true
    tests_only = false
  ##/
###/


ARGV.each_with_index do |(x), index|
  if "#{x}".start_with?("--boxes") 
    boxes_config =  "#{x}".split("=")[1]
    # Read stack configuration
    stack = YAML.load_file(boxes_config) 
    #/
  end
    
  if !"#{x}".start_with?("--") 
    stack.each_with_index do |(boxname, info), index|
      if "#{x}" == "#{boxname}"
        #"Check if box in argument list: "
        a_box = "#{boxname}"
      end
    end
  end

  if "#{x}".start_with?("--output") 
    package_dir = "#{x}".split("=")[1]
  end
  if "#{x}".start_with?("--run-test") 
    run_test = "#{x}".split("=")[1]
  end
  if "#{x}"=='--skip-tests'
    run_tests=false
  end
  if "#{x}"=='--tests-only'
    do_provision=false
    provision_while_up=false
    tests_only=true
    run_tests=true    
  end
  if "#{x}"=='provision' 
    do_provision_while_up = true
    if !tests_only
      do_provision=true
      provision_while_up=true
    elsif tests_only
      do_provision = false
    end
  end
  if "#{x}"=='--provision'
    do_provision = true
  end
  if "#{x}"=='package'
    do_package = true
    do_provision = false
    provision_while_up = false
  end
end

platform = Gem::Platform.local.os
default_network_interface = ""
if platform == "mingw32"
  # Windows
  default_network_interface = `route PRINT | grep 'Intel' | head -n 1 | cut -d '.' -f10`
else
  # *nix
  default_network_interface = `ip route | awk '/^default/ {printf "%s", $5; exit 0}'`
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  
  stack.each_with_index do |(boxname, info), index|
    hostname="#{info['vm']['hostname']}"
    config.vm.allow_hosts_modification = true
    config.vm.hostname = hostname
    if !info['vm']['natnet'].nil?
      prepf="#{info['scripts']['pre_process']}" 
      postpf="#{info['scripts']['post_process']}"
      postpropf="#{info['scripts']['post_provision']}"
    end
    config.vm.define boxname do |cfg|

      # provider implementation
      cfg.vm.provider :virtualbox do |vb, override|
        cfg.vm.box = info['vm']['box']
        vb.name = hostname
        override.vm.hostname = hostname     
        if info['vm']['natnet'].nil?
          # no network config; create default 
          # WARNING: for demonstration purposes only; public network should not
          # be used in production environments!
          override.vm.network "public_network", bridge: default_network_interface, auto_config: true
        else        
            # Internal network
          override.vm.network :private_network, ip: info['network']['ip'], virtualbox__intnet: info['vm']['natnet']
            # Forwarding rule for host ssh access over nat vrouter
          override.vm.network :forwarded_port, guest: 22, host: info['vm']['host_ssh_port'], id: 'ssh'   
          # optional port mappings  
          ports = info['ports']
          if !ports.nil?
            ports.each do |name, service|
              override.vm.network :forwarded_port, 
                guest: "#{service['guest_port']}", 
                host: "#{service['host_port']}", 
                id: "#{name}"
            end
          end

          vb.customize [
            "modifyvm", :id, 
            "--natnet1", info['vm']['natnet_cidr'], 
            "--memory", info['vm']['mem'], 
            "--cpus", info['vm']['cpus'], 
            "--hwvirtex", "on",
            "--vram", "256",                  # VRAM:256 (for full-screen mode)
            "--clipboard", "bidirectional",   # Sharing clipboard
            "--draganddrop", "bidirectional", # Enable D&D
            "--ioapic", "on"
          ]
        end
      end # end provider

      # handle list of mounts on host
      mounts = info['mounts']
        if !mounts.nil?
        mounts.each do |name, mount|
          if  "#{mount['mount_options']}" != ""
            cfg.vm.synced_folder "#{mount['host_path']}", "#{mount['guest_path']}" , create: true, owner: "#{mount['owner']}", group: "#{mount['group']}", mount_options: ["#{mount['mount_options']}"]
          else
            cfg.vm.synced_folder "#{mount['host_path']}", "#{mount['guest_path']}"
         end
        end
      end
 
      # Run the provisioners
      # Stack provisioner
      if do_provision 
        cfg.vm.provision "shell", path: info['provision_script_file'], args: "#{boxname} #{boxes_config}"
      end

      # Run some tests
      u_tests = info['unit_tests']
      if !run_tests then
        u_tests = nil
      end
      if !u_tests.nil?
        u_tests.each do |name, unit|    
          if run_test == "" || run_test  == name # run all / single named test
            unit['args'].each do |argv|   # provision test unit for each set of arguments
              cfg.vm.provision "shell", path: "#{unit['script']}" , args: "#{argv} #{__script_path}" , run: 'always' 
            end
          end
        end    
      end
      # Preprocessing trigger: run script on host before "up"
      cfg.trigger.before :up do |trigger|        
        if ("#{a_box}" == "#{boxname}" || "#{a_box}" =="") && ("#{prepf}" != "")
          trigger.info = "Start pre-processing tasks..."
          trigger.run = {path: "#{prepf}", args: "#{boxes_config} #{boxname}"}
        end
      end      

      # Post processing trigger: run script on host after "up"
      cfg.trigger.after :up do |trigger|        
        if ("#{a_box}" == "#{boxname}" || "#{a_box}" =="") && ("#{postpf}" != "")
          trigger.info = "Start post-processing tasks after up... #{postpf}"          
          trigger.run = {path: "#{postpf}", args: "#{boxes_config} #{boxname} #{hostname}"}
        end
      end
      # Post processing trigger: run script on host after "reload"
      cfg.trigger.after :reload do |trigger|        
        if ("#{a_box}" == "#{boxname}" || "#{a_box}" =="") && ("#{postpf}" != "")
          trigger.info = "Start post-processing tasks after reload... #{postpf}"          
          trigger.run = {path: "#{postpf}", args: "#{boxes_config} #{boxname} #{hostname}"}
        end
      end

      # Triggered when vagrant called with the "provision" argument
      # The option "--provision" after up/reload does NOT invoke this trigger!
      cfg.trigger.after :provision do |trigger|        
        if ("#{a_box}" == "#{boxname}" || "#{a_box}" =="") && ("#{postpropf}" != "")
          trigger.info = "Start post-processing tasks after provisioning... #{postpropf}"          
          trigger.run = {path: "#{postpropf}", args: "#{boxes_config} #{boxname}"}
        end
      end

    end # end config
  end # end stack 
end
